plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.jetbrains.kotlin.parcelize)
    alias(libs.plugins.ksp)
    alias(libs.plugins.hilt)
    alias(libs.plugins.compose.compiler)
    alias(libs.plugins.google.secrets.gradle.plugin)
    alias(libs.plugins.room)
}

android {
    namespace 'edu.card.clarity'
    compileSdk 34

    defaultConfig {
        applicationId "edu.card.clarity"
        minSdk 34
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

    room {
        schemaDirectory("$projectDir/schemas")
    }
}

secrets {
    // Optionally specify a different file name containing your secrets.
    // The plugin defaults to "local.properties"
    propertiesFileName = "secrets.properties"

    // A properties file containing default secret values. This file can be
    // checked in version control.
    defaultPropertiesFileName = "local.defaults.properties"

    // Configure which keys should be ignored by the plugin by providing regular expressions.
    // "sdk.dir" is ignored by default.
    ignoreList.add("keyToIgnore") // Ignore the key "keyToIgnore"
    ignoreList.add("sdk.*")       // Ignore all keys matching the regexp "sdk.*"
}

dependencies {
    // Android Dependencies
    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.text.google.fonts
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.lifecycle.runtimeCompose
    implementation libs.androidx.lifecycle.viewModelCompose
    implementation libs.androidx.annotation
    implementation libs.android.libraries.places.places
    implementation libs.maps.android.places.places.ktx
    implementation libs.accompanist.permissions

    // Kotlin Dependencies
    implementation platform(libs.jetbrains.kotlin.bom)
    implementation libs.jetbrains.kotlinx.coroutines.play.services

    // Database Dependencies
    implementation libs.room.runtime
    ksp(libs.room.compiler)
    implementation libs.room.ktx

    // Dependency Injection Dependencies
    implementation libs.hilt.ext.navigation.compose
    implementation libs.hilt.android.core
    ksp(libs.hilt.compiler)
    ksp(libs.hilt.ext.compiler)

    // Testing Dependencies
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.bundles.androidx.test.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    testImplementation libs.bundles.mockito
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.core.testing
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    testImplementation libs.junit.jupiter.params
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}